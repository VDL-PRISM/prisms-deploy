version: "2"
services:
  # Front end
  nginx:
    restart: always
    image: nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/etc/nginx/conf.d"
      - "/etc/nginx/vhost.d"
      - "/usr/share/nginx/html"
      - "./certs:/etc/nginx/certs:ro"

  nginx-gen:
    restart: always
    image: jwilder/docker-gen
    container_name: nginx-gen
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "./nginx-config/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro"
    volumes_from:
      - nginx
    entrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf

  # Generate certificates
  letsencrypt-nginx-proxy-companion:
    restart: always
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt-nginx-proxy-companion
    volumes_from:
      - nginx
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./certs:/etc/nginx/certs:rw"
    environment:
      - NGINX_DOCKER_GEN_CONTAINER=nginx-gen

  # Applications
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./grafana-storage:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    environment:
      GF_SERVER_ROOT_URL: https://${GF_VIRTUAL_HOST}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      VIRTUAL_HOST: ${GF_VIRTUAL_HOST}
      VIRTUAL_NETWORK: nginx-proxy
      VIRTUAL_PORT: 3000
      LETSENCRYPT_HOST: ${GF_VIRTUAL_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
    depends_on:
      - influxdb

  sensor_status:
    image: prisms/sensor-status:dev
    container_name: sensor_status
    environment:
      DASH_BASIC_AUTH_ENABLE: ${DASH_BASIC_AUTH_ENABLE}
      DASH_BASIC_AUTH_USERNAME: ${DASH_BASIC_AUTH_USERNAME}
      DASH_BASIC_AUTH_PASSWORD: ${DASH_BASIC_AUTH_PASSWORD}
      DASH_INFLUX_HOST: ${INFLUXDB_HOST}
      DASH_INFLUX_USERNAME: ${DASH_INFLUXDB_USERNAME}
      DASH_INFLUX_PASSWORD: ${DASH_INFLUXDB_PASSWORD}
      DASH_INFLUX_DATABASE: ${INFLUXDB_DB}
      DASH_INFLUX_SSL: ${INFLUXDB_SSL}
      DASH_MONGO_HOST: ${MONGO_HOST}
      DASH_MONGO_USER: ${DASH_MONGO_USER}
      DASH_MONGO_PASSWORD: ${DASH_MONGO_PASSWORD}
      DASH_MONGO_DATABASE: ${MONGO_DATABASE}
      DASH_SERVER_UPDATE_TIME: ${DASH_SERVER_UPDATE_TIME}
      VIRTUAL_HOST: ${DASH_VIRTUAL_HOST}
      VIRTUAL_NETWORK: nginx-proxy
      VIRTUAL_PORT: 8000
      LETSENCRYPT_HOST: ${DASH_VIRTUAL_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
    depends_on:
      - influxdb
      - mongodb

  export_tool:
    image: prisms/export_tool:dev
    container_name: export_tool
    environment:
      ET_BASIC_AUTH_USERNAME: ${ET_BASIC_AUTH_USERNAME}
      ET_BASIC_AUTH_PASSWORD: ${ET_BASIC_AUTH_PASSWORD}
      ET_INFLUX_HOST: ${INFLUXDB_HOST}
      ET_INFLUX_USERNAME: ${ET_INFLUXDB_USERNAME}
      ET_INFLUX_PASSWORD: ${ET_INFLUXDB_PASSWORD}
      ET_INFLUX_SSL: ${INFLUXDB_SSL}
      ET_INFLUX_DATABASE: ${INFLUXDB_DB}
      ET_SECRET_KEY: ${ET_SECRET_KEY}
      VIRTUAL_HOST: ${ET_VIRTUAL_HOST}
      VIRTUAL_NETWORK: nginx-proxy
      VIRTUAL_PORT: 8000
      LETSENCRYPT_HOST: ${ET_VIRTUAL_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
    depends_on:
      - influxdb

  # Data storage
  influxdb:
    image: influxdb:1.6
    container_name: influxdb
    volumes:
      - ./influxdb-storage:/var/lib/influxdb
      - ./influxdb-provisioning:/docker-entrypoint-initdb.d
    environment:
      INFLUXDB_DB: ${INFLUXDB_DB}
      INFLUXDB_HTTP_AUTH_ENABLED: ${INFLUXDB_HTTP_AUTH_ENABLED}
      INFLUXDB_ADMIN_USER: ${INFLUXDB_ADMIN_USER}
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
      INFLUXDB_READ_USER: ${INFLUXDB_READ_USER}
      INFLUXDB_READ_USER_PASSWORD: ${INFLUXDB_READ_USER_PASSWORD}
      INFLUXDB_WRITE_USER: ${INFLUXDB_WRITE_USER}
      INFLUXDB_WRITE_USER_PASSWORD: ${INFLUXDB_WRITE_USER_PASSWORD}
      VIRTUAL_HOST: ${INFLUXDB_VIRTUAL_HOST}
      VIRTUAL_NETWORK: nginx-proxy
      VIRTUAL_PORT: 8086
      LETSENCRYPT_HOST: ${INFLUXDB_VIRTUAL_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}

  mongodb:
    image: mongo:4.0
    container_name: mongodb
    ports:
      - '27017:27017'
    volumes:
      - ./mongodb-storage:/data/db
      - ./mongodb-provisioning:/docker-entrypoint-initdb.d
      - ./mongodb-config/certs/ca.pem:/etc/ssl/certs/ca.pem
      - ./certs/${MONGO_VIRTUAL_HOST}:/etc/ssl/${MONGO_VIRTUAL_HOST}
    environment:
      MONGO_DATA_DIR: /data/db
      # MONGO_LOG_DIR: /dev/null
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      VIRTUAL_HOST: ${MONGO_VIRTUAL_HOST}
      VIRTUAL_NETWORK: nginx-proxy
      VIRTUAL_PORT: 3001  # Fake port -- not really used
      LETSENCRYPT_HOST: ${MONGO_VIRTUAL_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
    entrypoint: bash -c 'cat /etc/ssl/${MONGO_VIRTUAL_HOST}/key.pem <(echo) /etc/ssl/${MONGO_VIRTUAL_HOST}/cert.pem > /etc/ssl/mongodb.pem && docker-entrypoint.sh mongod --sslMode allowSSL --sslPEMKeyFile /etc/ssl/mongodb.pem --bind_ip_all --smallfiles' # --logpath=/dev/null # --quiet

  # Data aggregation
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    ports:
      - "1883:1883"
      - "8883:8883"
    volumes:
      - ./mosquitto-storage/config:/mosquitto/config
      - ./mosquitto-storage/data:/mosquitto/data
      - ./certs/${MQTT_VIRTUAL_HOST}:/mosquitto/certs:ro
    environment:
      VIRTUAL_HOST: ${MQTT_VIRTUAL_HOST}
      VIRTUAL_NETWORK: nginx-proxy
      VIRTUAL_PORT: 3002  # Fake port -- not really used
      LETSENCRYPT_HOST: ${MQTT_VIRTUAL_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}

  ha_subscriber:
    image: prisms/ha_mqtt_subscriber:dev
    container_name: ha_subscriber
    volumes:
      - ./ha_subscriber-storage/:/app/data
    environment:
      HA_SUB_INFLUX_USERNAME: ${HA_SUB_INFLUXDB_USERNAME}
      HA_SUB_INFLUX_PASSWORD: ${HA_SUB_INFLUXDB_PASSWORD}
      HA_SUB_INFLUX_HOST: ${INFLUXDB_HOST}
      HA_SUB_INFLUX_DATABASE: ${INFLUXDB_DB}
      HA_SUB_MQTT_HOST: ${MQTT_HOST}
      HA_SUB_MQTT_USER: ${HA_SUB_MQTT_USER}
      HA_SUB_MQTT_PASSWORD: ${HA_SUB_MQTT_PASSWORD}
      HA_SUB_MQTT_TOPICS: ${HA_SUB_MQTT_TOPICS}
    depends_on:
      - influxdb
      - mosquitto

  prisms_subscriber:
    image: prisms/prisms_mqtt_subscriber:dev
    container_name: prisms_subscriber
    volumes:
      - ./prisms_subscriber-storage/:/app/data
    environment:
      PRISMS_SUB_INFLUX_USERNAME: ${PRISMS_SUB_INFLUXDB_USERNAME}
      PRISMS_SUB_INFLUX_PASSWORD: ${PRISMS_SUB_INFLUXDB_PASSWORD}
      PRISMS_SUB_INFLUX_HOST: ${INFLUXDB_HOST}
      PRISMS_SUB_INFLUX_DATABASE: ${INFLUXDB_DB}
      PRISMS_SUB_INFLUX_SSL: ${INFLUXDB_SSL}
      PRISMS_SUB_MQTT_HOST: ${MQTT_HOST}
      PRISMS_SUB_MQTT_USER: ${PRISMS_SUB_MQTT_USER}
      PRISMS_SUB_MQTT_PASSWORD: ${PRISMS_SUB_MQTT_PASSWORD}
      PRISMS_SUB_MQTT_TOPICS: ${PRISMS_SUB_MQTT_TOPICS}
      PRISMS_SUB_MONGO_HOST: ${MONGO_HOST}
      PRISMS_SUB_MONGO_USER: ${PRISMS_SUB_MONGO_USER}
      PRISMS_SUB_MONGO_PASSWORD: ${PRISMS_SUB_MONGO_PASSWORD}
      PRISMS_SUB_MONGO_DATABASE: ${MONGO_DATABASE}
    depends_on:
      - influxdb
      - mongodb
      - mosquitto
